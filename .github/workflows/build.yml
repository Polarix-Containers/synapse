name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
    # Ignore Markdown files
    paths-ignore:
      - '**.md'
  schedule:
    # Build the image daily
    - cron: '15 0 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: polarix-containers/synapse
  TAG: latest

jobs:
  build:
    name: Build & push new image
    permissions:
      contents: read
      packages: write
    timeout-minutes: 10
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version for tags
        run: |
          echo "FULL_VERSION=$(grep -oP '(?<=VERSION=).*' Dockerfile)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.TAG }}
            ${{ env.FULL_VERSION }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-mjolnir:
    name: Build & push Mjolnir image
    needs: build
    permissions:
      contents: read
      packages: write
    timeout-minutes: 10
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version for tags
        run: |
          echo "FULL_VERSION=$(grep -oP '(?<=VERSION=).*' Dockerfile)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            mjolnir
            ${{ env.FULL_VERSION }}-mjolnir

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: mjolnir
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  trivy:
    name: Scan current image with Trivy
    needs: build-mjolnir
    permissions:
      security-events: write
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:mjolnir
          format: template
          template: '@/contrib/sarif.tpl'
          output: trivy-results.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          vuln-type: os,library

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy

  grype:
    name: Scan current image with Grype
    needs: build-mjolnir
    permissions:
      security-events: write
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    steps:
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v5
        id: grype
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:mjolnir
          fail-build: false

      - name: Upload Grype scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: grype
